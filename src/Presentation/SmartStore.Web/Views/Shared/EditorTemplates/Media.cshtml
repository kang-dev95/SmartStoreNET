@model int?

@using SmartStore.Core.Domain.Media;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Services.Media;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Utilities;

@functions {
	private bool TransientUpload
	{
		get
		{
			return GetMetadata<bool>("transientUpload");
		}
	}

	private bool Compact
	{
		get
		{
			return GetMetadata<bool>("compact");
		}
	}

	private string Path
	{
		get
		{
			return GetMetadata<string>("path") ?? GetMetadata<string>("album");
		}
	}

	private int EntityId
	{
		get
		{
			return GetMetadata<int>("entityId");
		}
	}

	private string EntityType
	{
		get
		{
			return GetMetadata<string>("entityType");
		}
	}

	private string DeleteUrl
	{
		get
		{
			return GetMetadata<string>("deleteUrl");
		}
	}

	private string SortUrl
	{
		get
		{
			return GetMetadata<string>("sortUrl");
		}
	}

	private string EntityAssignmentUrl
	{
		get
		{
			return GetMetadata<string>("entityAssignmentUrl");
		}
	}

	// TODO: make enum UploadType > Compact, Default, Multifile
	private bool MultiFile
	{
		get
		{
			return GetMetadata<bool>("multifile");
		}
	}

	private IEnumerable<IMediaFile> UploadedFiles
	{
		get
		{
			return GetMetadata<IEnumerable<IMediaFile>>("uploadedFiles");
		}
	}
}

@{
	var random = CommonHelper.GenerateRandomInteger();
	var mediaService = this.CommonServices.MediaService;
	var mediaSettings = this.CommonServices.Resolve<MediaSettings>();
	var fileId = Model;
}

<div class="fileupload-container">
	<div class="fileupload-thumb-stage">
		<div class="fileupload-thumb" style="background-image: url('@Url.Media(fileId, mediaSettings.ProductThumbPictureSize)')">
			@Html.HiddenFor(x => x, new { @class = "hidden" })
		</div>
	</div>

	<div class="fileupload-controls">

		@*
			TODO: If multiupload > other MediaTypes may be have to be configured. Should be a property of this editor template.
		*@

		@(Html.SmartStore().FileUploader()
			.UploadUrl(Url.Action("Upload", "Media", new { isTransient = TransientUpload, path = Path, area = "Admin" }))
			.HtmlAttribute("data-fallback-url", mediaService.GetFallbackUrl(mediaSettings.ProductThumbPictureSize))
			.AcceptedFileTypes(mediaSettings.ImageTypes)
			.ShowRemoveButton(Model.HasValue)
			.ShowRemoveButtonAfterUpload(true)
			.Compact(ViewData["compact"].Convert<bool?>() == true)

			.PreviewContainerId("preview-" + random)
			.Multifile(ViewData["multifile"].Convert<bool?>() == true)
			.MainFileId(fileId)
			.UploadedFiles(UploadedFiles)
			.EntityType("Product")
			.EntityId(EntityId)
			.DeleteUrl(DeleteUrl)
			.SortUrl(SortUrl)
			.EntityAssignmentUrl(EntityAssignmentUrl)

			.OnUploadCompletedHandlerName("onUploadCompleted_" + random)
		)
	</div>
</div>

@if (MultiFile)
{
	<script>
		$(function () {

			// TODO: this belongs into _CreateOrUpdatePictures.cshtml
			// Set MainPictureId 
			$(".set-main-picture").on("click", function (e) {

				var el = $(this).closest('.mf-image-preview');

				$.ajax({
					async: false,
					cache: false,
					type: 'POST',
					url: '@Url.Action("SetMainPictureId", "Product")',
					data: {
						pictureId: el.data("picture-id"),
						productId: @EntityId
					},
					success: function () {
						// Set preview picture.
						var elDropzone = $('.fileupload-container');
						var fileName = el.find(".name").text();
						var fileSize = el.find(".size").text();
						var fileUrl = el.find(".dz-image-preview img").attr("src");

						elDropzone.find('.fileupload-filename').html(fileName);
						elDropzone.find('.fileupload-filesize').html(fileSize);
						elDropzone.find('.fileupload-thumb').css('background-image', 'url("' + fileUrl + '")');
						elDropzone.find('.hidden').val(el.data("picture-id")).trigger('change');
					}
				});

				return false;
			});
		});
	</script>
}

<script>
	window['onUploadCompleted_@random'] = function (e, el, data) {
		$("#add-product-picture").removeAttr('disabled');
	}
	window['onFileRemove_@random'] = function (e, el) {
		$("#add-product-picture").attr('disabled', 'disabled');
	}
	@*window['onAborted_@random'] = function (el) {
		//console.log("onAborted", arguments);
	}
	window['onError_@random'] = function (el, textStatus, errorThrown) {
		//console.log("onError", arguments);
	}*@
</script>