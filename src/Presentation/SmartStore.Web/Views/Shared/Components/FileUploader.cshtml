@model FileUploader

@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Services.Media;

@{
	Html.AddScriptParts("~/Content/vendors/dropzone/js/dropzone.js");
	Html.AddScriptParts("~/Content/vendors/dropzone/js/dropzoneWrapper.js");

	if (!Model.Name.HasValue())
	{
		Model.Name = "upload-" + CommonHelper.GenerateRandomInteger();
	}

	if (!Model.HtmlAttributes.ContainsKey("id"))
	{
		Model.Id = Model.Name;
	}
}

	<div class="fileupload-container">

		<div id="@Model.Name" @Html.Attrs(Model.HtmlAttributes)>

			<div class="fileupload">
				<input type="hidden" id="@(Model.Id)-file" name="@(Model.Id)-file" />

				<div class="fileupload-progress">
					<!-- The global progress bar -->
					<div class="progress">
						<div class="progress-bar" role="progressbar" style="width: 0%" aria-valuemin="0" aria-valuemax="100"></div>
					</div>
				</div>

				<div class="fileupload-info mb-3 d-none">
					<div class="fileupload-filename"></div>
					<div class="fileupload-filesize"></div>
				</div>

				<div class="fileupload-buttons">
					<button class="btn btn-danger remove@(Model.Compact ? " btn-sm" : "")" @Html.Attr("style", "display: none", !Model.ShowRemoveButton)>
						<span>@Model.RemoveText</span>
					</button>

					<span class="btn btn-@(Model.ButtonOutlineStyle ? "outline-" : "")@Model.ButtonStyle.ToString().ToLower() fileinput-button@(Model.Compact ? " btn-sm" : "")">
						@if (Model.IconCssClass.HasValue())
						{
							<i class="@Model.IconCssClass"></i>
						}
						<span>@Model.UploadText</span>
						<input type="hidden" id="@(Model.Id)-file" name="@(Model.Id)-file" />
					</span>

					<button class="btn btn-outline-secondary cancel@(Model.Compact ? " btn-sm" : "")" style="display: none">
						<span>@Model.CancelText</span>
					</button>
				</div>
			</div>

		</div>
	</div>


@if (Model.Multifile == true)
{
	var files = Model.UploadedFiles;

	// TODO: find a better way!!!
	var mediaService = EngineContext.Current.Resolve<IMediaService>();

	<!-- Placeholder to paste preview container into -->
	<div id="@Model.PreviewContainerId" class="d-flex flex-wrap preview-container mt-3">
		@foreach (var file in files)
		{
			var fileSize = Prettifier.BytesToString(file.MediaFile.Size);
			var isMainPic = file.MediaFileId == Model.MainFileId;
			var entityMediaId = 0;
			var previewUrl = mediaService.GetUrl(file.MediaFileId, 0);

			if (Model.EntityType.Equals("Product"))
			{
				var entityMediaFile = file as ProductMediaFile;
				entityMediaId = entityMediaFile.Id;
			}

			<div class="mf-image-preview d-flex flex-column"
				 data-display-order="@file.DisplayOrder"
				 data-picture-id="@file.MediaFileId"
				 @Html.Attr("data-entity-picture-id", entityMediaId.ToString(), entityMediaId != 0)>

				<div class="dz-processing dz-image-preview dz-success dz-complete"
					 data-toggle="tooltip"
					 data-html="true"
					 data-placement="bottom"
					 title='<div class="text-left px-3"><em>@file.MediaFile.Name</em> <br/> <b>@fileSize</b></div>'>
					<div>
						<span class="preview align-self-center">
							<img data-dz-thumbnail src="@previewUrl" />
						</span>
					</div>

					@if (isMainPic)
					{
						<span class="main-pic-badge badge badge-success">Hauptbild</span>
					}
				</div>

				<div class="fu-preview-toolbar">
					<a href="#" class="fu-preview-control set-main-picture">
						<i class="far fa-eye"></i>
					</a>
					<a href="#" class="fu-preview-control delete-entity-picture float-right">
						<i class="far fa-trash-alt"></i>
					</a>
				</div>
			</div>
		}
	</div>

    //TODO: Make partial out of this and use it in both occasions
    <div class="files-preview d-none" data-entity-picture-id="" data-picture-id="">
		<div class="mf-image-preview d-flex flex-column" data-display-order="0">
			<div class="dz-processing dz-image-preview dz-success dz-complete" 
				 data-toggle="tooltip"
				 data-html="true"
				 data-placement="bottom"
				 title="">
				<div>
					<span class="preview align-self-center">
						<img data-dz-thumbnail />
					</span>
				</div>
			</div>
			<div class="fu-preview-toolbar">
				<a href="#" class="fu-preview-control set-main-picture">
					<i class="far fa-eye"></i>
				</a>
				<a href="#" class="fu-preview-control delete-entity-picture float-right">
					<i class="far fa-trash-alt"></i>
				</a>
			</div>
		</div>
	</div>
}

<script data-origin="FileUploader">
    $(function () {

        var elUpload = $("#@Model.Id");

		// Init dropzone
		elUpload.dropzoneWrapper({
			onUploading: @Html.Raw(Model.OnUploadingHandlerName.HasValue() ? Model.OnUploadingHandlerName : "null"),
			onUploadCompleted: @Html.Raw(Model.OnUploadCompletedHandlerName.HasValue() ? Model.OnUploadCompletedHandlerName : "null"),
			onAborted: @Html.Raw(Model.OnAbortedHandlerName.HasValue() ? Model.OnAbortedHandlerName : "null"),
			onError: @Html.Raw(Model.OnErrorHandlerName.HasValue() ? Model.OnErrorHandlerName : "null"),
			onFileRemove: @Html.Raw(Model.OnFileRemoveHandlerName.HasValue() ? Model.OnFileRemoveHandlerName : "null"),
            onCompleted: @Html.Raw(Model.OnCompletedHandlerName.HasValue() ? Model.OnCompletedHandlerName : "null"),
            maxFiles: @(Model.Multifile ? 10 : 1),
			previewContainerId: "@(Model.Multifile ? Model.PreviewContainerId : "")"
        });

		// TODO: The following is only relevant for multfiles

		// Deleting.
		$(".delete-entity-picture", elUpload).on("click", function (e) {

			var el = $(this).closest('.mf-image-preview');

			$.ajax({
				async: false,
				cache: false,
				type: 'POST',
				url: '@Model.DeleteUrl',
				data: { id: el.data("entity-picture-id") },
				success: function () {
					el.removeClass("d-flex")
						.addClass("d-none");
				}
			});

			return false;
		});

		// TODO: unique identifier is needed
		var dropzone = Dropzone.forElement($(".dropzone")[0]);

		// Listen to success
		dropzone.on("success", function (file, response, progress) {

			// call Admin > Product > ProductPictureAdd(int pictureId, int displayOrder, int productId)
			$.ajax({
				async: false,
				cache: false,
				type: 'POST',
				url: '@Model.EntityAssignmentUrl',
				data: {
					pictureId: response.fileId,
					displayOrder: 1000,	/* This value must be very high because items with lowest display order will automatically become MainPic. Real DisplayOrder will be set by sortPictures. */
                    entityId: '@Model.EntityId'
				},
                success: function () {
					// call sortPictures again to set display-order
					sortPictures(sortable);
                }
			});
		});

		// Sorting.
		var sortable = $('.preview-container').sortable({	// TODO: unique identifier is needed
			items: '.mf-image-preview'
		}).on('sort', function (e, ui) {
			sortPictures($(this));
		});

		// TODO: mf-prefix is bad (already used for mobile friendly).
		function sortPictures(sortableContainer) {
			var items = sortableContainer.find('.mf-image-preview');

			var newOrder = [];
			$.each(items, function (i, val) {
				newOrder.push($(val).data('product-picture-id'));
			});

			// Set display order of ProductPicture.
			$.ajax({
				async: false,
				cache: false,
				type: 'POST',
				url: '@Model.SortUrl',
                data: {
                    pictures: newOrder.join(","),
					entityId: @Model.EntityId
                }
			});
        }
	});
</script>