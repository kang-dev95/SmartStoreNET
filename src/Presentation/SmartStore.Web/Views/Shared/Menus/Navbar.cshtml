@using SmartStore.Collections
@using SmartStore.Web.Framework.UI
@model MenuModel
@{
    var root = Model.Root;
    if (root == null)
    {
        return;
    }

    var currentNavItem = Model.SelectedNode.IsLeaf && Model.SelectedNode.Parent != null 
        ? Model.SelectedNode.Parent.Value.EntityId 
        : Model.SelectedNode.Value.EntityId;
    var renderMoreItem = false;
    var rtl = WorkContext.WorkingLanguage.Rtl;
    var hasIcons = root.Children.Any(x => x.Value.Icon.HasValue());
    var hasImages = root.Children.Any(x => x.Value.ImageUrl.HasValue());
    var isFirst = true;
    object obj = null;
}

@functions {
    private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state)
    {
        var liClasses = new List<string>();

        liClasses.Add("nav-item");

        if (node.Depth <= 1 && node.HasChildren)
        {
            liClasses.Add(node.Depth > 0 ? "dropdown-submenu" : "dropdown");
        }

        if ((state & NodePathState.Expanded) == NodePathState.Expanded)
        {
            liClasses.Add("expanded");
        }

        if ((state & NodePathState.Selected) == NodePathState.Selected)
        {
            liClasses.Add("selected");
        }

        return liClasses.Count > 0 ? string.Join(" ", liClasses) : null;
    }
}

<div class="cms-menu cms-menu-navbar" data-menu-name="@(Model.Name?.ToLower())">
    <div class="megamenu-nav megamenu-nav--prev @(rtl ? "omega" : "alpha")">
	    <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="far fa-chevron-left"></i></a>
    </div>

    <ul class="navbar-nav flex-row flex-nowrap" 
        data-selected-menu-item="@currentNavItem" 
        data-current-category-id="@CurrentCategoryId" 
        data-current-product-id="@CurrentProductId"
        data-current-manufacturer-id="@CurrentManufacturerId">

        @foreach (var node in root.Children)
        {
            var item = node.Value;
            if (!item.Visible || node.GetMetadata<bool>("spare", false))
            {
                if (node.GetMetadata<bool>("spare", false))
                {
                    renderMoreItem = true;
                }
                continue;
            }

            var itemState = node.GetNodePathState(Model.Path);
            var isMegaMenuActive = node.GetMetadata<bool?>("IsMegaMenuActive", false);
            var isDropDownActive = (isMegaMenuActive == null ? true : (bool)isMegaMenuActive) && node.HasChildren;
            var itemText = node.GetItemText(T);
            var itemUrl = item.GenerateUrl(this.Url);
            var relAttr = item.LinkHtmlAttributes.TryGetValue("rel", out obj) ? (string)obj : string.Empty;
            var target = item.LinkHtmlAttributes.TryGetValue("target", out obj) ? (string)obj : string.Empty;
            var cssClass = item.LinkHtmlAttributes.TryGetValue("class", out obj) ? (string)obj : string.Empty;
            var shortDescription = item.LinkHtmlAttributes.TryGetValue("title", out obj) ? (string)obj : string.Empty;

            if (item.IsGroupHeader)
            {
                if (!isFirst)
                {
                    <li><hr /></li>
                }
                if (itemText.HasValue() && item.Text != "[SKIP]")
                {
                    <li class="menu-header h4 mt-2">@itemText</li>
                }
                isFirst = false;
                continue;
            }

            <li class="@(GetCssClassForNode(node, itemState))" id="main-nav-item-@item.EntityId" data-id="@item.EntityId">
                <a href="@itemUrl" class="menu-link nav-link@(isDropDownActive ? " dropdown-toggle" : "")@(cssClass.HasValue() ? cssClass.EnsureStartsWith(" ") : "")"
                    @Html.Attr("rel", relAttr, relAttr.HasValue())
                    @Html.Attr("target", target, target.HasValue())
                    @Html.Attr("title", shortDescription, shortDescription.HasValue())
                    @Html.Attr("aria-expanded", "false", isDropDownActive)
                    @Html.Attr("data-target", "#dropdown-menu-{0}".FormatInvariant(item.EntityId), isDropDownActive)>
                    @if (hasIcons)
                    {
	                    <i class="fa-fw@(item.Icon.HasValue() ? item.Icon.EnsureStartsWith(" ") : "")"></i>
                    }
                    else if (hasImages)
                    {
                        <img class="sm-icon" src="@Url.Content(item.ImageUrl.NullEmpty() ?? "~/Administration/Content/images/ap-default-white.png")" alt="" />
                    }
                    <span @Html.Attr("dir", item.Rtl ? "rtl" : "ltr", item.Rtl != rtl)>@itemText</span>
                </a>
                @if (item.BadgeText.HasValue())
                {
                    <label class="badge badge-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                }
            </li>

            isFirst = false;
        }

        @if (renderMoreItem)
        {
            <li class="nav-item dropdown" data-id="-1">
                <a href="#" class="nav-link dropdown-toggle" aria-expanded="false" data-target="#dropdown-menu--1">
                    @T("CatalogMenu.MoreLink")
                </a>
            </li>
        }
    </ul>

    <div class="megamenu-nav megamenu-nav--next @(rtl ? "alpha" : "omega")">
	    <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="far fa-chevron-right"></i></a>
    </div>
</div>