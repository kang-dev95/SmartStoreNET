@using SmartStore.Collections
@using SmartStore.Web.Framework.UI
@model MenuModel
@{
    var root = Model.Root;
    if (root == null)
    {
        return;
    }
}

<div class="cms-menu cms-menu-dropdown" data-menu-name="@(Model.Name?.ToLower())">
    <div class="dropdown">
        <a class="menubar-link" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" href="#">
		    <span>@root.GetItemText(T)</span>
            <i class="fal fa-angle-down menubar-caret"></i>
        </a>
        @CreateDropdown(root.Children)
    </div>
</div>

@helper CreateDropdown(IEnumerable<TreeNode<MenuItem>> nodes)
{
    if (!nodes.Any())
    {
        return;
    }

    object obj = null;
    var isFirst = true;
    var isRtl = nodes.First().Value.Rtl;
    var hasIcons = nodes.Any(x => x.Value.Icon.HasValue());

    <div class="dropdown-menu @(isRtl ? "dropdown-menu-left" : "dropdown-menu-right")">
        @*@{ Html.RenderWidget("servicemenu_before"); }*@

        @foreach (var node in nodes)
        {
            var item = node.Value;
            if (!item.Visible)
            {
                continue;
            }

            var itemText = node.GetItemText(T);
            var itemUrl = item.GenerateUrl(this.ViewContext.RequestContext);
            var linkId = item.LinkHtmlAttributes.TryGetValue("id", out obj) ? (string)obj : string.Empty;
            var relAttr = item.LinkHtmlAttributes.TryGetValue("rel", out obj) ? (string)obj : string.Empty;
            var target = item.LinkHtmlAttributes.TryGetValue("target", out obj) ? (string)obj : string.Empty;
            var shortDescription = item.LinkHtmlAttributes.TryGetValue("title", out obj) ? (string)obj : string.Empty;
            var imageUrl = item.ImageUrl.NullEmpty() ?? "~/Administration/Content/images/ap-default-white.png";

            if (item.IsGroupHeader)
            {
                if (!isFirst)
                {
                    <div class="dropdown-divider"></div>
                }
                if (item.Text.HasValue() && item.Text != "[SKIP]")
                {
                    <div class="dropdown-header h6">@itemText</div>
                }
                isFirst = false;
                continue;
            }

            <a href="@itemUrl" class="dropdown-item" 
                @Html.Attr("id", linkId, linkId.HasValue())
                @Html.Attr("rel", relAttr, relAttr.HasValue())
                @Html.Attr("target", target, target.HasValue())
                @Html.Attr("title", shortDescription, shortDescription.HasValue())>
		        @if (hasIcons)
		        {
			        <i class="fa-fw@(item.Icon.HasValue() ? " {0}".FormatInvariant(item.Icon) : "")"></i>
		        }
                <span>@itemText</span>
            </a>
            if (node.HasChildren)
            {
                @CreateDropdown(node.Children)
            }

            isFirst = false;
        }

        @*@{ Html.RenderWidget("servicemenu_after"); }*@
    </div>
}