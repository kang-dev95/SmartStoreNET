@model OrderFulfillmentDashboardReportModel
@using Newtonsoft.Json;
@{
    var jsonData = JsonConvert.SerializeObject(Model);
}
<div class="report">
    <div class="report-title-row">
        <div class="report-title">@T("Admin.SalesReport.Incomplete")</div>
    </div>
    <div class="row" style="height:300px">
        <div class="incomplete-orders-chart-container col-3">
            <div class="incomplete-orders-chart-text">
                <div class="fs-h4 text-bold fade-in">@Model.OrdersIncompleteReport[0].QuantityTotal</div>
                <div class="fs-h5 fade-in">@Model.OrdersIncompleteReport[0].AmountTotal</div>
            </div>
            <div class="canvas-container w-100 h-100">
                <canvas id="incomplete-orders-chart-day" width="4" height="3" style="pointer-events: all">
                </canvas>
            </div>
        </div>
        <div class="incomplete-orders-chart-container col-3">
            <div class="incomplete-orders-chart-text">
                <div class="fs-h4 text-bold fade-in">@Model.OrdersIncompleteReport[1].QuantityTotal</div>
                <div class="fs-h5 fade-in">@Model.OrdersIncompleteReport[1].AmountTotal</div>
            </div>
            <div class="canvas-container w-100 h-100">
                <canvas id="incomplete-orders-chart-yesterday" width="4" height="3" style="pointer-events: all">
                </canvas>
            </div>
        </div>
        <div class="incomplete-orders-chart-container col-3">
            <div class="incomplete-orders-chart-text">
                <div class="fs-h4 text-bold fade-in">@Model.OrdersIncompleteReport[2].QuantityTotal</div>
                <div class="fs-h5 fade-in">@Model.OrdersIncompleteReport[2].AmountTotal</div>
            </div>
            <div class="canvas-container w-100 h-100">
                <canvas id="incomplete-orders-chart-week" width="4" height="3" style="pointer-events: all">
                </canvas>
            </div>
        </div>
        <div class="incomplete-orders-chart-container col-3">
                <div class="incomplete-orders-chart-text">
                    <div class="fs-h4 text-bold fade-in">@Model.OrdersIncompleteReport[3].QuantityTotal</div>
                    <div class="fs-h5 fade-in">@Model.OrdersIncompleteReport[3].AmountTotal</div>
                </div>
                <div class="canvas-container w-100 h-100">
                    <canvas id="incomplete-orders-chart-older" width="4" height="3" style="pointer-events: all">
                    </canvas>
                </div>
            </div>
    </div>
</div>

<script>
    var style = getComputedStyle(document.body);
    var colorSuccess = style.getPropertyValue('--success');
    var colorPrimary = style.getPropertyValue('--primary');
    var colorWarning = style.getPropertyValue('--warning');
    var fontFamily = style.getPropertyValue('--font-family');

    var dataSets = JSON.parse('@Html.Raw(jsonData)');

    var options = {
        responsive: true,
        responsiveAnimationDuration: 1000,
        maintainAspectRatio: false,
        cutoutPercentage: 80,
        rotation: -0.5 * Math.PI,
        circumfernce: 2 * Math.PI,
        animation: {
            animateRotate: true,
            animateScale: true,
            duration: 1000,
            easing: 'easeInOutSine',
        },
        layout: {
            padding: {
                left: 0,
                right: 0,
                top: 20,
                bottom: 20
            }
        },
        legend: false,
        tooltips: {
            enabled: true,
            mode: 'nearest',
            intersect: true,
            titleFontFamily: fontFamily,
            bodyFontFamily: fontFamily,
            xPadding: 10,
            yPadding: 8,
            caretPadding: 6,
            caretSize: 8,
            cornerRadius: 4,
            titleMarginBottom: 8,
            bodySpacing: 5,
            callbacks: {
                label: function (item, data) {
                    return " " + data.labels[item.index] + ": " + dataSets.Reports[item.index].QuantityFormatted;
                },
            }
        },
    };

    // Day
    var dataDay = {
        labels: ["@T("Admin.SalesReport.Incomplete.TotalNotShippedOrders")", "@T("Admin.SalesReport.Incomplete.TotalUnpaidOrders")", "@T("Admin.SalesReport.NewOrders")"],
        datasets: [{
            data: [dataSets.OrdersIncompleteReport[0].Reports[0].Quantity, dataSets.OrdersIncompleteReport[0].Reports[1].Quantity, dataSets.OrdersIncompleteReport[0].Reports[2].Quantity],
            backgroundColor: [colorWarning, colorPrimary, colorSuccess],
            borderAlign: 'center',
            borderColor: '#fff',
            borderWidth: 10,
            weight: 1,
            hoverBackgroundColor: [colorWarning, colorPrimary, colorSuccess],
            hoverBorderColor: '#fff',
            hoverBorderWidth: 0,
        }],
    };

    var chartElementDay = $('#incomplete-orders-chart-day')[0];
    var chartCtxDay = chartElementDay.getContext('2d');

    var chartDay = new Chart(chartCtxDay, {
        type: 'doughnut',
        data: dataDay,
        options: options
    });

    // Yesterday
    var dataYesterday = {
        labels: ["@T("Admin.SalesReport.Incomplete.TotalNotShippedOrders")", "@T("Admin.SalesReport.Incomplete.TotalUnpaidOrders")", "@T("Admin.SalesReport.NewOrders")"],
        datasets: [{
            data: [dataSets.OrdersIncompleteReport[1].Reports[0].Quantity, dataSets.OrdersIncompleteReport[1].Reports[1].Quantity, dataSets.OrdersIncompleteReport[1].Reports[2].Quantity],
            backgroundColor: [colorWarning, colorPrimary, colorSuccess],
            borderAlign: 'center',
            borderColor: '#fff',
            borderWidth: 10,
            weight: 1,
            hoverBackgroundColor: [colorWarning, colorPrimary, colorSuccess],
            hoverBorderColor: '#fff',
            hoverBorderWidth: 0,
        }],
    };

    var chartElementYesterday = $('#incomplete-orders-chart-yesterday')[0];
    var chartCtxYesterday = chartElementYesterday.getContext('2d');

    var chartYesterday = new Chart(chartCtxYesterday, {
        type: 'doughnut',
        data: dataYesterday,
        options: options
    });

    // Week
    var dataWeek = {
        labels: ["@T("Admin.SalesReport.Incomplete.TotalNotShippedOrders")", "@T("Admin.SalesReport.Incomplete.TotalUnpaidOrders")", "@T("Admin.SalesReport.NewOrders")"],
        datasets: [{
            data: [dataSets.OrdersIncompleteReport[2].Reports[0].Quantity, dataSets.OrdersIncompleteReport[2].Reports[1].Quantity, dataSets.OrdersIncompleteReport[2].Reports[2].Quantity],
            backgroundColor: [colorWarning, colorPrimary, colorSuccess],
            borderAlign: 'center',
            borderColor: '#fff',
            borderWidth: 10,
            weight: 1,
            hoverBackgroundColor: [colorWarning, colorPrimary, colorSuccess],
            hoverBorderColor: '#fff',
            hoverBorderWidth: 0,
        }],
    };

    var chartElementWeek = $('#incomplete-orders-chart-week')[0];
    var chartCtxWeek = chartElementWeek.getContext('2d');

    var chartWeek = new Chart(chartCtxWeek, {
        type: 'doughnut',
        data: dataWeek,
        options: options
    });

    // Older
    var dataOlder = {
        labels: ["@T("Admin.SalesReport.Incomplete.TotalNotShippedOrders")", "@T("Admin.SalesReport.Incomplete.TotalUnpaidOrders")", "@T("Admin.SalesReport.NewOrders")"],
        datasets: [{
            data: [dataSets.OrdersIncompleteReport[3].Reports[0].Quantity, dataSets.OrdersIncompleteReport[3].Reports[1].Quantity, dataSets.OrdersIncompleteReport[3].Reports[2].Quantity],
            backgroundColor: [colorWarning, colorPrimary, colorSuccess],
            borderAlign: 'center',
            borderColor: '#fff',
            borderWidth: 10,
            weight: 1,
            hoverBackgroundColor: [colorWarning, colorPrimary, colorSuccess],
            hoverBorderColor: '#fff',
            hoverBorderWidth: 0,
        }],
    };

    var chartElementOlder = $('#incomplete-orders-chart-older')[0];
    var chartCtxOlder = chartElementOlder.getContext('2d');

    var chartOlder = new Chart(chartCtxOlder, {
        type: 'doughnut',
        data: dataOlder,
        options: options
    });
</script>