@model OrdersDashboardReportModel

<div class="bg-white rounded-lg shadow h-100" style="overflow:hidden">
    <div class="px-3 pt-3 d-flex pb-0">
        <div class="font-weight-medium p-0 title-report">
            <i class="fa fa-chart-bar pr-2"></i>
            @T("Account.CustomerOrders")
        </div>

        <div class="align-self-center pl-2 fs-h6">
            <span id="orders-delta-percentage">+121%</span><i id="orders-delta-percentage-chevron" class="fas fa-chevron-up text-success pl-1"></i>
        </div>

        <div class="btn-group btn-group-toggle ml-auto" data-toggle="buttons">
            <label class="btn btn-secondary active chart-toggle">
                <input type="radio" name="orders-toggle" period="day" autocomplete="off" checked>
                @T("Time.Day")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" period="week" autocomplete="off">
                @T("Time.Week")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" period="month" autocomplete="off">
                @T("Time.Month")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" period="year" autocomplete="off">
                @T("Time.Year")
            </label>
        </div>
    </div>
    <div class="pl-3 pt-2" id="orders-chart-legend"></div>
    <div class="canvas-container pt-0 mt-0 h-100" style="transform: translateY(-69px); pointer-events: none">
        <canvas id="orders-chart" class="w-100" width="70" height="22" style="position: absolute; bottom: 0px; pointer-events: all"></canvas>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('input[type=radio][name=orders-toggle]').change(function () {
            setChartData($('input:radio[name=orders-toggle]:checked').attr("period"));
        });

        function setChartData(period) {
            ordersChart.destroy();

            if (period === "day") {
                activePeriod = 0;
                updateData(labels_day, dummyDataSales_day, dummyDataCancelled_day, dummyDataProcessing_day, dummyDataPending_day, dummyDataOrdersDelta_day);
            }
            else if (period === "week") {
                activePeriod = 1;
                updateData(labels_week, dummyDataSales_week, dummyDataCancelled_week, dummyDataProcessing_week, dummyDataPending_week, dummyDataOrdersDelta_week);
            }
            else if (period === "month") {
                activePeriod = 2;
                updateData(labels_month, dummyDataSales_month, dummyDataCancelled_month, dummyDataProcessing_month, dummyDataPending_month, dummyDataOrdersDelta_month);
            }
            else if (period === "year") {
                activePeriod = 3;
                updateData(labels_year, dummyDataSales_year, dummyDataCancelled_year, dummyDataProcessing_year, dummyDataPending_year, dummyDataOrdersDelta_year);
            }
            else {
                console.error("no valid chart period >>> " + period);
            }
        }

        function updateData(labels, dataOrders, dataCancelled, dataPending, dataProcessing, deltaPercentage) {
            order_config.data.datasets[0].data = dataCancelled;
            order_config.data.datasets[1].data = dataPending;
            order_config.data.datasets[2].data = dataProcessing;
            order_config.data.datasets[3].data = dataOrders;

            var icon = document.getElementById("orders-delta-percentage-chevron");
            var text = document.getElementById("orders-delta-percentage");

            if (deltaPercentage < 0) {
                text.innerHTML = deltaPercentage + "%";
                icon.classList.remove("fa-chevron-up");
                icon.classList.remove("text-success");
                icon.classList.add("fa-chevron-down");
                icon.classList.add("text-danger");
            } else {
                text.innerHTML = "+" + deltaPercentage + "%";
                icon.classList.remove("fa-chevron-down");
                icon.classList.remove("text-danger");
                icon.classList.add("fa-chevron-up");
                icon.classList.add("text-success");
            }

            order_config.data.labels = labels;
            ordersChart = new Chart(orders_ctx, order_config);

            ordersLegendContainer.innerHTML = ordersChart.generateLegend();
            var legendItems = ordersLegendContainer.getElementsByTagName('li');
            for (var i = 0; i < legendItems.length; i++) {
                legendItems[i].addEventListener("click", legendClickCallback, false);
            }
        }

        function legendClickCallback(event) {
            event = event || window.event;

            var target = event.target || event.srcElement;
            while (target.nodeName !== 'LI') {
                target = target.parentElement;
            }
            var parent = target.parentElement;
            var chartId = parseInt(parent.classList[0].split("-")[0], 10);
            console.log(chartId);
            var chart = Chart.instances[chartId];
            console.log(chart);
            var index = (ordersChart.data.datasets.length - 1) - Array.prototype.slice.call(parent.children).indexOf(target);
            var meta = chart.getDatasetMeta(index);
            // console.log(meta);
            console.log(Chart);

            if (chart.data.datasets[index].hidden) {
                target.classList.remove('hidden');

            } else {
                target.classList.add('hidden');
            }

            meta.hidden = !chart.data.datasets[index].hidden;
            chart.data.datasets[index].hidden = !chart.data.datasets[index].hidden;

            chart.update();
        }

        //----------------------------------------------------
        // Chartjs
        var style = getComputedStyle(document.body);
        var colorPrimary = style.getPropertyValue('--primary');
        var colorIndigo = style.getPropertyValue('--indigo');
        var colorDanger = style.getPropertyValue('--danger');
        var colorSuccess = style.getPropertyValue('--success');
        var colorWarning = style.getPropertyValue('--warning');

        var fontFamily = style.getPropertyValue('--font-family-sans-serif');

        var chartOptions = {
            responsive: true,
            responsiveAnimationDuration: 0,//1000,
            maintainAspectRatio: true,
            stacked: true,
            animation: {
                duration: 1000,
                hide: {
                    visible: {
                        type: true,
                        easing: 'easeInOutSine'
                    },
                },
                easing: 'easeInOutSine',

            },
            hover: {
                mode: 'nearest',
                intersect: false,
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 5,
                    bottom: 4
                }
            },
            legend: false,
            legendCallback: function (chart) {
                var text = [];
                text.push('<ul class="' + chart.id + '-legend">');
                for (var i = chart.data.datasets.length - 1; i >= 0; i--) {
                    if (chart.data.datasets[i].hidden) {
                        text.push('<li class="hidden"><span style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                    }
                    else {
                        text.push('<li><span style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                    }

                    if (chart.data.labels[i]) {
                        text.push(chart.data.datasets[i].label);
                        text.push('<b class="font-weight-500 pl-1" style="text-decoration: none">' + getOrdersStatusTotalSum(i) + '</b>');
                    }
                    text.push('</li>');
                }
                text.push('</ul>');
                return text.join("");
            },
            elements: {
                point: {
                    radius: 0,
                    hoverRadius: 6,
                }
            },
            tooltips: {
                enabled: true,
                mode: 'nearest',
                intersect: false,
            },
            scales: {
                yAxes: [{
                    display: false,
                    stacked: true,

                }],
                xAxes: [{
                    display: false,
                    position: 'top',
                    gridLines: {
                        display: false,
                    },
                    scaleLabel: {
                        display: false,
                        padding: 0,
                    },
                }]
            },
            title: {
                display: false,
            }
        }

        var dummyDataSales_day = [8, 5, 9, 7, 8, 10, 9, 12, 9, 15, 17, 16, 12, 9, 14, 17, 18, 13, 18, 15, 19, 17, 18, 16];
        var dummyDataSales_week = [7, 5, 9, 7, 8, 12, 13];
        var dummyDataSales_month = [34, 52, 46, 59];
        var dummyDataSales_year = [61, 72, 53, 82, 112, 135, 122, 113, 133, 124, 111, 124, 112];

        var dummyDataCancelled_day = [1, 0, 0, 2, 1, 1, 0, 2, 1, 2, 3, 1, 0, 0, 1, 0, 4, 2, 1, 1, 3, 2, 1, 0];
        var dummyDataCancelled_week = [1, 2, 3, 2, 1, 4, 1];
        var dummyDataCancelled_month = [4, 7, 2, 8];
        var dummyDataCancelled_year = [6, 9, 5, 3, 12, 17, 9, 14, 18, 9, 12, 16, 8];

        var dummyDataPending_day = [3, 1, 5, 4, 4, 8, 7, 7, 7, 12, 13, 10, 5, 7, 5, 8, 9, 2, 9, 8, 15, 8, 6, 8];
        var dummyDataPending_week = [3, 2, 7, 3, 3, 4, 2];
        var dummyDataPending_month = [14, 28, 16, 23];
        var dummyDataPending_year = [3, 5, 7, 4, 8, 3, 6, 3, 8, 12, 31, 21, 47];

        var dummyDataProcessing_day = [4, 3, 3, 2, 2, 3, 2, 3, 4, 6, 9, 9, 3, 5, 9, 7, 8, 3, 8, 5, 9, 7, 8, 6];
        var dummyDataProcessing_week = [4, 2, 6, 2, 3, 7, 8];
        var dummyDataProcessing_month = [17, 14, 22, 27];
        var dummyDataProcessing_year = [8, 12, 28, 22, 32, 43, 42, 70, 45, 66, 43, 60, 59];

        var dummyDataOrdersDelta_day = 121;
        var dummyDataOrdersDelta_week = 14;
        var dummyDataOrdersDelta_month = 3;
        var dummyDataOrdersDelta_year = -22;

        var dummyData_OrdersCompleteSumDay = "2.353 €";
        var dummyData_OrdersPendingSumDay = "854 €";
        var dummyData_OrdersProcessingSumDay = "1.123 €";
        var dummyData_OrdersCancelledSumDay = "84 €";

        var dummyData_OrdersCompleteSumWeek = "12.325 €";
        var dummyData_OrdersPendingSumWeek = "2.421 €";
        var dummyData_OrdersProcessingSumWeek = "4.953 €";
        var dummyData_OrdersCancelledSumWeek = "204 €";

        var dummyData_OrdersCompleteSumMonth = "48.134 €";
        var dummyData_OrdersPendingSumMonth = "2.645 €";
        var dummyData_OrdersProcessingSumMonth = "6.553 €";
        var dummyData_OrdersCancelledSumMonth = "584 €";

        var dummyData_OrdersCompleteSumYear = "358.435 €";
        var dummyData_OrdersPendingSumYear = "2.653 €";
        var dummyData_OrdersProcessingSumYear = "6.851 €";
        var dummyData_OrdersCancelledSumYear = "5.581 €";

        var labels_day = ['0:00 Uhr', '1:00 Uhr', '2:00 Uhr', '3:00 Uhr',
            '4:00 Uhr', '5:00 Uhr', '6:00 Uhr', '7:00 Uhr', '8:00 Uhr',
            '9:00 Uhr', '10:00 Uhr', '11:00 Uhr', '12:00 Uhr', '13:00 Uhr',
            '14:00 Uhr', '15:00 Uhr', '16:00 Uhr', '17:00 Uhr', '18:00 Uhr',
            '19:00 Uhr', '20:00 Uhr', '21:00 Uhr', '22:00 Uhr', '23:00 Uhr'];
        var labels_week = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'];
        var labels_month = ['01.01 - 07.01', '08.01 - 15.01', '16.01 - 23.01', '24.01 - 31.01'];
        var labels_year = ['April 2019', 'Mai 2019', 'Juni 2019', 'Juli 2019', 'August 2019', 'September 2019', 'October 2019', 'November 2019', 'Dezember 2019', 'Januar 2020', 'Februar 2020', 'März 2020'];

        var activePeriod = 0;

        var ordersChartElement = document.getElementById('orders-chart');
        var orders_ctx = ordersChartElement.getContext('2d');
        var ordersLegendContainer = document.getElementById("orders-chart-legend");

        var salesGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        salesGradient.addColorStop(0, hexToRgba(colorPrimary.substr(1), .9));
        salesGradient.addColorStop(1, hexToRgba(colorPrimary.substr(1), .1));

        var cancelledGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        cancelledGradient.addColorStop(0, hexToRgba(colorDanger.substr(1), .9));
        cancelledGradient.addColorStop(1, hexToRgba(colorDanger.substr(1), .1));

        var pendingGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        pendingGradient.addColorStop(0, hexToRgba(colorWarning.substr(1), .9));
        pendingGradient.addColorStop(1, hexToRgba(colorWarning.substr(1), .1));

        var processingGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        processingGradient.addColorStop(0, hexToRgba(colorSuccess.substr(1), .9));
        processingGradient.addColorStop(1, hexToRgba(colorSuccess.substr(1), .1));

        var order_config = {
            type: 'line',
            data: {
                labels: labels_day,
                datasets: [{
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Cancelled")',
                    data: dummyDataCancelled_day,
                    borderWidth: 4,
                    borderColor: colorDanger,
                    backgroundColor: cancelledGradient,
                    lineTension: 0.2,
                    fill: true,
                    pointHoverBackgroundColor: colorDanger,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Pending")',
                    data: dummyDataPending_day,
                    borderWidth: 4,
                    borderColor: colorWarning,
                    backgroundColor: pendingGradient,
                    lineTension: 0.2,
                    fill: true,
                    hidden: true,
                    pointHoverBackgroundColor: colorWarning,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Processing")',
                    data: dummyDataProcessing_day,
                    borderWidth: 4,
                    borderColor: colorSuccess,
                    backgroundColor: processingGradient,
                    lineTension: 0.2,
                    fill: true,
                    hidden: true,
                    pointHoverBackgroundColor: colorSuccess,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Complete")',
                    data: dummyDataSales_day,
                    borderWidth: 4,
                    borderColor: colorPrimary,
                    backgroundColor: salesGradient,
                    lineTension: 0.2,
                    fill: true,
                    pointHoverBackgroundColor: colorPrimary,
                    pointHoverBorderColor: 'transparent',
                }]
            },
            options: chartOptions,
        }

        var ordersChart = new Chart(orders_ctx, order_config);

        ordersLegendContainer.innerHTML = ordersChart.generateLegend();
        var legendItems = ordersLegendContainer.getElementsByTagName('li');
        for (var i = 0; i < legendItems.length; i++) {
            legendItems[i].addEventListener("click", legendClickCallback, false);
        }

        function hexToRgba(hex, opacity) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            var rgb = result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
            return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + opacity + ')';
        }

        function getOrdersStatusTotalSum(currentStatus) {
            if (activePeriod === 0) {
                  //Day
                  if (currentStatus === 0) {
                      // Cancelled
                      return dummyData_OrdersCancelledSumDay;
                  }
                  else if (currentStatus === 1) {
                      // Pending
                      return dummyData_OrdersPendingSumDay;
                  }
                  else if (currentStatus === 2) {
                      // Processing
                      return dummyData_OrdersProcessingSumDay;
                  }
                  else if (currentStatus === 3) {
                      // Complete
                      return dummyData_OrdersCompleteSumDay;
                  }
                  else {
                      console.warn("wrong index >>> " + currentStatus);
                      return 0;
                  }
              }
              else if (activePeriod === 1) {
                  //Week
                  if (currentStatus === 0) {
                      // Cancelled
                      return dummyData_OrdersCancelledSumWeek;
                  }
                  else if (currentStatus === 1) {
                      // Pending
                      return dummyData_OrdersPendingSumWeek;
                  }
                  else if (currentStatus === 2) {
                      // Processing
                      return dummyData_OrdersProcessingSumWeek;
                  }
                  else if (currentStatus === 3) {
                      // Complete
                      return dummyData_OrdersCompleteSumWeek;
                  }
                  else {
                      console.warn("wrong index >>> " + currentStatus);
                      return 0;
                  }
              }
              else if (activePeriod === 2) {
                  //Month
                  if (currentStatus === 0) {
                      // Cancelled
                      return dummyData_OrdersCancelledSumMonth;
                  }
                  else if (currentStatus === 1) {
                      // Pending
                      return dummyData_OrdersPendingSumMonth;
                  }
                  else if (currentStatus === 2) {
                      // Processing
                      return dummyData_OrdersProcessingSumMonth;
                  }
                  else if (currentStatus === 3) {
                      // Complete
                      return dummyData_OrdersCompleteSumMonth;
                  }
                  else {
                      console.warn("wrong index >>> " + currentStatus);
                      return 0;
                  }
              }
              else if (activePeriod === 3) {
                  //Year
                  if (currentStatus === 0) {
                      // Cancelled
                      return dummyData_OrdersCancelledSumYear;
                  }
                  else if (currentStatus === 1) {
                      // Pending
                      return dummyData_OrdersPendingSumYear;
                  }
                  else if (currentStatus === 2) {
                      // Processing
                      return dummyData_OrdersProcessingSumYear;
                  }
                  else if (currentStatus === 3) {
                      // Complete
                      return dummyData_OrdersCompleteSumYear;
                  }
                  else {
                      console.warn("wrong status index >>> " + currentStatus);
                      return 0;
                  }
              } else {
                  console.warn("wrong period index >>> " + period);
                  return 0;
              }
          }
    });
</script>
<style>
    #orders-chart-legend > ul {
        cursor: pointer;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #orders-chart-legend li {
        display: inline-block;
    }

        #orders-chart-legend li:not(:last-child) {
            padding-right: 1rem;
        }

        #orders-chart-legend li.hidden {
            text-decoration: line-through;
        }

        #orders-chart-legend li span {
            border-radius: 7px;
            display: inline-block;
            height: 11px;
            margin-right: .3rem;
            width: 11px;
        }
</style>