@model DashboardChartReportModel
@using Newtonsoft.Json;
@{
    var jsonData = JsonConvert.SerializeObject(Model);
}

<div class="report">
    <div class="report-title-row">
        <div class="report-title">@T("Account.CustomerOrders")</div>

        <div class="pl-4 fs-h5">
            <span id="orders-sum-amount" class="text-muted"></span>
        </div>

        <div class="pl-3 fs-h5">
            <span id="orders-delta-percentage"></span><span id="orders-delta-percentage-chevron" class="chevron pl-1 d-none"></span>
        </div>

        <div class="btn-group btn-group-toggle ml-auto" data-toggle="buttons">
            <label class="btn btn-secondary btn-dashboard active">
                <input type="radio" name="orders-toggle" data-period="0" autocomplete="off" checked>
                @T("Time.Today")
            </label>
            <label class="btn btn-secondary btn-dashboard">
                <input type="radio" name="orders-toggle" data-period="1" autocomplete="off">
                @T("Time.Yesterday")
            </label>
            <label class="btn btn-secondary btn-dashboard">
                <input type="radio" name="orders-toggle" data-period="2" autocomplete="off">
                @T("Admin.Report.LastWeek")
            </label>
            <label class="btn btn-secondary btn-dashboard">
                <input type="radio" name="orders-toggle" data-period="3" autocomplete="off">
                @T("Admin.Report.LastMonth")
            </label>
            <label class="btn btn-secondary btn-dashboard">
                <input type="radio" name="orders-toggle" data-period="4" autocomplete="off">
                @T("Admin.Report.ThisYear")
            </label>
        </div>
    </div>
    <div class="px-4 pt-2" id="orders-chart-legend"></div>
    <div class="canvas-container" style="height: 75%; transform: translateY(29px); pointer-events: none">
        <canvas id="orders-chart" class="w-100" width="70" height="18" style="position: absolute; pointer-events: all"></canvas>
    </div>
</div>

<script>
    $(function () {
        var ordersData = JSON.parse('@Html.Raw(jsonData)');
        var $percentageElement = $("#orders-delta-percentage");
        var $chevronElement = $("#orders-delta-percentage-chevron");
        var $sumElement = $("#orders-sum-amount");
        var currentPeriod = 0;

        var style = getComputedStyle(document.body);
        var colorPrimary = style.getPropertyValue('--primary');
        var colorIndigo = style.getPropertyValue('--indigo');
        var colorDanger = style.getPropertyValue('--danger');
        var colorSuccess = style.getPropertyValue('--success');
        var colorWarning = style.getPropertyValue('--warning');
        var fontFamily = style.getPropertyValue('--font-family-sans-serif');
        var whiteTransparent = 'rgba(255,255,255, 0.5)';
        //----------------------------------------------------
        // Chartjs
        var $ordersChartElement = $('#orders-chart')[0];
        var orders_ctx = $ordersChartElement.getContext('2d');
        console.log($ordersChartElement.clientHeight);
        var cancelledGradient = orders_ctx.createLinearGradient(0, 0, 0, $ordersChartElement.clientHeight/0.74);
        //cancelledGradient.addColorStop(0, hexToRgba(colorDanger.substr(1), 1));
        //cancelledGradient.addColorStop(0, hexToRgba(colorDanger.substr(1), .1));
        cancelledGradient.addColorStop(0, 'rgb(232,123,92)');
        cancelledGradient.addColorStop(1, 'white');

        var pendingGradient = orders_ctx.createLinearGradient(0, 0, 0, $ordersChartElement.clientHeight/0.74);
        //pendingGradient.addColorStop(0, hexToRgba(colorWarning.substr(1), 1));
        //pendingGradient.addColorStop(1, hexToRgba(colorWarning.substr(1), .1));
        pendingGradient.addColorStop(0, 'rgb(249,199,125)');
        pendingGradient.addColorStop(1, 'white');

        var processingGradient = orders_ctx.createLinearGradient(0, 0, 0, $ordersChartElement.clientHeight/0.74);
        //processingGradient.addColorStop(0, hexToRgba(colorSuccess.substr(1), 1));
        //processingGradient.addColorStop(1, hexToRgba(colorSuccess.substr(1), .1));
        processingGradient.addColorStop(0, 'rgb(92,193,166)');
        processingGradient.addColorStop(1, 'white');

        var completeGradient = orders_ctx.createLinearGradient(0, 0, 0, $ordersChartElement.clientHeight/0.74);
        //completeGradient.addColorStop(0, hexToRgba(colorPrimary.substr(1), 1));
        //completeGradient.addColorStop(1, hexToRgba(colorPrimary.substr(1), .1));
        completeGradient.addColorStop(0, 'rgb(123,170,213)');
        completeGradient.addColorStop(1, 'white');

        var order_config = {
            type: 'line',
            data: {
                labels: ordersData.Reports[0].Labels,
                datasets: [{
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Cancelled")',
                    data: ordersData.Reports[0].DataSets[0].Amount,
                    borderColor: colorDanger,
                    backgroundColor: cancelledGradient,
                    pointHoverBackgroundColor: colorDanger,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Pending")',
                    data: ordersData.Reports[0].DataSets[1].Amount,
                    borderColor: colorWarning,
                    backgroundColor: pendingGradient,
                    hidden: true,
                    pointHoverBackgroundColor: colorWarning,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Processing")',
                    data: ordersData.Reports[0].DataSets[2].Amount,
                    borderColor: colorSuccess,
                    backgroundColor: processingGradient,
                    hidden: true,
                    pointHoverBackgroundColor: colorSuccess,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Complete")',
                    data: ordersData.Reports[0].DataSets[3].Amount,
                    borderColor: colorPrimary,
                    backgroundColor: completeGradient,
                    pointHoverBackgroundColor: colorPrimary,
                    pointHoverBorderColor: 'transparent',
                }]
            },
            options: {
                responsive: true,
                responsiveAnimationDuration: 0,
                maintainAspectRatio: false,
                stacked: true,
                animation: {
                    duration: 400,
                    hide: {
                        visible: {
                            type: true,
                            easing: 'easeInOutSine'
                        },
                    },
                    easing: 'easeInOutSine',

                },
                hover: {
                    mode: 'nearest',
                    intersect: false,
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 5,
                        bottom: 4
                    }
                },
                legend: false,
                legendCallback: function (chart) {
                    var text = [];
                    text.push('<ul class="' + chart.id + '-legend">');
                    for (var i = chart.data.datasets.length - 1; i >= 0; i--) {
                        if (chart.data.datasets[i].hidden) {
                            text.push('<li class="hidden"><span class="legend" style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                        }
                        else {
                            text.push('<li><span class="legend" style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                        }

                        if (chart.data.labels[i]) {
                            text.push('<span>' + chart.data.datasets[i].label + '</span>');
                            text.push('<span class="font-weight-500 pl-1 total-amount">' + ordersData.Reports[currentPeriod].DataSets[i].TotalAmount + '</span>');
                        }
                        text.push('</li>');
                    }
                    text.push('</ul>');
                    return text.join("");
                },
                elements: {
                    point: {
                        radius: 0,
                        hoverRadius: 6,
                        hitRadius: 3,
                    },
                    line: {
                        borderWidth: 1,
                        lineTension: 0.2,
                        fill: true,
                    }
                },
                tooltips: {
                    enabled: true,
                    mode: 'nearest',
                    intersect: false,
                    titleFontFamily: fontFamily,
                    bodyFontFamily: fontFamily,
                    xPadding: 10,
                    yPadding: 8,
                    caretPadding: 6,
                    caretSize: 8,
                    cornerRadius: 4,
                    titleMarginBottom: 8,
                    bodySpacing: 5,
                    callbacks: {
                        label: function (item) {
                            return ordersData.Reports[currentPeriod].DataSets[item.datasetIndex].FormattedAmount[item.index];
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        display: false,
                        stacked: true,
                    }],
                    xAxes: [{
                        display: false,
                        position: 'top',
                        gridLines: {
                            display: false,
                        },
                        scaleLabel: {
                            display: false,
                            padding: 0,
                        },
                    }]
                },
                title: {
                    display: false,
                }
            },
        }

        var ordersChart = new Chart(orders_ctx, order_config);
        setPercentageDelta(currentPeriod);

        var $ordersLegendContainer = $("#orders-chart-legend")[0];
        createLegend();

        //$("#orders-chart").outerHeight($("#orders-chart-container").outerHeight());
        //$(window).on("resize", function () {
        //    $("#orders-chart").outerHeight($(window).height() - $("#orders-chart").offset().top - Math.abs($("#orders-chart").outerHeight(true) - $("#orders-chart").outerHeight()));
        //});

        //resizeChart();


        //$(window).on("resize", function(){
        //    resizeChart();
        //});

        //function resizeChart(){
        //    // $("#orders-chart").outerHeight($(window).height()-$("#orders-chart").offset().top - Math.abs($("#orders-chart").outerHeight(true) - $("#orders-chart").outerHeight()));
        //    $($ordersChartElement).attr('width', $('orders-chart-container').width()); //max width
        //    $($ordersChartElement).attr('height', $('orders-chart-container').height());
        //}
        ////----------------------------------------------------
        // EventHandler

        $('input[type=radio][name=orders-toggle]').on('change', function () {
            setChartData($('input:radio[name=orders-toggle]:checked').data("period"));
        });

        //----------------------------------------------------
        // Functions

        function setPercentageDelta(period) {
            var val = ordersData.Reports[period].PercentageDelta;

            if (val < 0) {
                $chevronElement.addClass("negative");
                $chevronElement.removeClass("d-none");
                $percentageElement.removeClass("text-success");
                $percentageElement.addClass("text-danger");
            }
            else if (val > 0) {
                $chevronElement.removeClass("negative");
                $chevronElement.removeClass("d-none");
                $percentageElement.addClass("text-success");
                $percentageElement.removeClass("text-danger");
            }
            else {
                $chevronElement.addClass("d-none")
            }

            var delta = val == 0 ? "" : val < 0 ? "-" + Math.abs(val) + "%" : "+" + Math.abs(val) + "%";

            $percentageElement.html(delta);
            $sumElement.html(ordersData.Reports[period].TotalAmount);
        }

        function setChartData(period) {
            ordersChart.destroy();
            console.log(order_config.data);
            console.log(period);
            order_config.data.labels = ordersData.Reports[period].Labels;
            for (var i = 0; i < order_config.data.datasets.length; i++) {
                order_config.data.datasets[i].data = ordersData.Reports[period].DataSets[i].Amount;
            }

            ordersChart = new Chart(orders_ctx, order_config);
            setPercentageDelta(period, ordersData);
            currentPeriod = period;
            createLegend();
        }

        function createLegend() {
            $($ordersLegendContainer).html(ordersChart.generateLegend());
            var legendItems = $ordersLegendContainer.getElementsByTagName('li');
            for (var i = 0; i < legendItems.length; i++) {
                legendItems[i].addEventListener("click", legendClickCallback, false);
            }
        }

        function legendClickCallback(event) {
            event = event || window.event;

            var target = event.target || event.srcElement;
            while (target.nodeName !== 'LI') {
                target = target.parentElement;
            }
            var parent = target.parentElement;
            var chartId = parseInt(parent.classList[0].split("-")[0], 10);
            var chart = Chart.instances[chartId];
            var index = (ordersChart.data.datasets.length - 1) - Array.prototype.slice.call(parent.children).indexOf(target);
            var meta = chart.getDatasetMeta(index);

            if (chart.data.datasets[index].hidden) {
                target.classList.remove('hidden');

            } else {
                target.classList.add('hidden');
            }

            meta.hidden = !chart.data.datasets[index].hidden;
            chart.data.datasets[index].hidden = !chart.data.datasets[index].hidden;

            chart.update();
        }

        function hexToRgba(hex, opacity) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            var rgb = result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
            return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + opacity + ')';
        }
    });
</script>