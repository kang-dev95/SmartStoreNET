@model OrdersDashboardReportModel
@using Newtonsoft.Json;
@{
    var jsonData = JsonConvert.SerializeObject(Model);
}

<div class="bg-white rounded-lg shadow h-100" style="overflow:hidden">
    <div class="px-3 pt-3 d-flex pb-0">
        <div class="font-weight-medium p-0 title-report">
            <i class="fa fa-chart-bar pr-2"></i>
            @T("Account.CustomerOrders")
        </div>

        <div class="align-self-center pl-2 fs-h6 font-weight-300">
            <span id="orders-sum-amount" class="text-muted">13.873 €</span>
        </div>

        <div class="align-self-center pl-2 fs-h6">
            <span id="orders-delta-percentage">+121%</span><i id="orders-delta-percentage-chevron" class="fas fa-chevron-up text-success pl-1"></i>
        </div>

        <div class="btn-group btn-group-toggle ml-auto" data-toggle="buttons">
            <label class="btn btn-secondary active chart-toggle">
                <input type="radio" name="orders-toggle" data-period="Day" autocomplete="off" checked>
                @T("Time.Day")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" data-period="Week" autocomplete="off">
                @T("Time.Week")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" data-period="Month" autocomplete="off">
                @T("Time.Month")
            </label>
            <label class="btn btn-secondary chart-toggle">
                <input type="radio" name="orders-toggle" data-period="Year" autocomplete="off">
                @T("Time.Year")
            </label>
        </div>
    </div>
    <div class="pl-3 pt-2" id="orders-chart-legend"></div>
    <div class="canvas-container pt-0 mt-0 h-100" style="transform: translateY(-69px); pointer-events: none">
        <canvas id="orders-chart" class="w-100" width="70" height="22" style="position: absolute; bottom: 0px; pointer-events: all"></canvas>
    </div>
</div>

<script>
    var currentPeriod = "Day";
    var ordersData = JSON.parse('@Html.Raw(jsonData)');
    $("#orders-delta-percentage").html(ordersData.Day.PercentageDelta);
    $("#orders-sum-amount").html(ordersData.Day.TotalAmount);

    $(document).ready(function () {
        $('input[type=radio][name=orders-toggle]').on('change', function () {
            setChartData($('input:radio[name=orders-toggle]:checked').data("period"));
        });

        function setChartData(period) {
            ordersChart.destroy();

            order_config.data.labels = ordersData[period].Labels;
            order_config.data.datasets[0].data = ordersData[period].Data[0].Amount;
            order_config.data.datasets[1].data = ordersData[period].Data[1].Amount;
            order_config.data.datasets[2].data = ordersData[period].Data[2].Amount;
            order_config.data.datasets[3].data = ordersData[period].Data[3].Amount;

            ordersChart = new Chart(orders_ctx, order_config);

            $("#orders-delta-percentage").html(ordersData[period].PercentageDelta);
            $("#orders-sum-amount").html(ordersData[period].TotalAmount);
            currentPeriod = period;
            console.log(period);

            ordersLegendContainer.innerHTML = ordersChart.generateLegend();
            var legendItems = ordersLegendContainer.getElementsByTagName('li');
            for (var i = 0; i < legendItems.length; i++) {
                legendItems[i].addEventListener("click", legendClickCallback, false);
            }
        }

        function legendClickCallback(event) {
            event = event || window.event;

            var target = event.target || event.srcElement;
            while (target.nodeName !== 'LI') {
                target = target.parentElement;
            }
            var parent = target.parentElement;
            var chartId = parseInt(parent.classList[0].split("-")[0], 10);
            var chart = Chart.instances[chartId];
            var index = (ordersChart.data.datasets.length - 1) - Array.prototype.slice.call(parent.children).indexOf(target);
            var meta = chart.getDatasetMeta(index);

            if (chart.data.datasets[index].hidden) {
                target.classList.remove('hidden');

            } else {
                target.classList.add('hidden');
            }

            meta.hidden = !chart.data.datasets[index].hidden;
            chart.data.datasets[index].hidden = !chart.data.datasets[index].hidden;

            chart.update();
        }

        //----------------------------------------------------
        // Chartjs
        var style = getComputedStyle(document.body);
        var colorPrimary = style.getPropertyValue('--primary');
        var colorIndigo = style.getPropertyValue('--indigo');
        var colorDanger = style.getPropertyValue('--danger');
        var colorSuccess = style.getPropertyValue('--success');
        var colorWarning = style.getPropertyValue('--warning');

        var fontFamily = style.getPropertyValue('--font-family-sans-serif');

        var chartOptions = {
            responsive: true,
            responsiveAnimationDuration: 0,//1000,
            maintainAspectRatio: true,
            stacked: true,
            animation: {
                duration: 400,
                hide: {
                    visible: {
                        type: true,
                        easing: 'easeInOutSine'
                    },
                },
                easing: 'easeInOutSine',

            },
            hover: {
                mode: 'nearest',
                intersect: false,
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 5,
                    bottom: 4
                }
            },
            legend: false,
            legendCallback: function (chart) {
                console.log(ordersData);
                console.log(currentPeriod);
                console.log(ordersData[currentPeriod]);

                var text = [];
                text.push('<ul class="' + chart.id + '-legend">');
                for (var i = chart.data.datasets.length - 1; i >= 0; i--) {
                    console.log(i);
                    console.log(ordersData[currentPeriod].Data[i]);
                    if (chart.data.datasets[i].hidden) {
                        text.push('<li class="hidden"><span class="legend" style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                    }
                    else {
                        text.push('<li><span class="legend" style="background-color:' + chart.data.datasets[i].borderColor + '"></span>');
                    }

                    if (chart.data.labels[i]) {
                        text.push('<span>' + chart.data.datasets[i].label + '</span>');
                        text.push('<span class="font-weight-500 pl-1 total-amount">' + ordersData[currentPeriod].Data[i].TotalAmount + '</span>');
                    }
                    text.push('</li>');
                }
                text.push('</ul>');
                return text.join("");
            },
            elements: {
                point: {
                    radius: 0,
                    hoverRadius: 6,
                }
            },
            tooltips: {
                enabled: true,
                mode: 'nearest',
                intersect: false,
            },
            scales: {
                yAxes: [{
                    display: false,
                    stacked: true,

                }],
                xAxes: [{
                    display: false,
                    position: 'top',
                    gridLines: {
                        display: false,
                    },
                    scaleLabel: {
                        display: false,
                        padding: 0,
                    },
                }]
            },
            title: {
                display: false,
            }
        }

        var ordersChartElement = $('#orders-chart')[0];
        var orders_ctx = ordersChartElement.getContext('2d');
        var ordersLegendContainer = $("#orders-chart-legend")[0];

        var salesGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        salesGradient.addColorStop(0, hexToRgba(colorPrimary.substr(1), .9));
        salesGradient.addColorStop(1, hexToRgba(colorPrimary.substr(1), .1));

        var cancelledGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        cancelledGradient.addColorStop(0, hexToRgba(colorDanger.substr(1), .9));
        cancelledGradient.addColorStop(1, hexToRgba(colorDanger.substr(1), .1));

        var pendingGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        pendingGradient.addColorStop(0, hexToRgba(colorWarning.substr(1), .9));
        pendingGradient.addColorStop(1, hexToRgba(colorWarning.substr(1), .1));

        var processingGradient = orders_ctx.createLinearGradient(0, 0, 0, ordersChartElement.clientHeight);
        processingGradient.addColorStop(0, hexToRgba(colorSuccess.substr(1), .9));
        processingGradient.addColorStop(1, hexToRgba(colorSuccess.substr(1), .1));

        var order_config = {
            type: 'line',
            data: {
                labels: ordersData.Day.Labels,
                datasets: [{
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Cancelled")',
                    data: ordersData.Day.Data[0].Amount,
                    borderWidth: 3,
                    borderColor: colorDanger,
                    backgroundColor: cancelledGradient,
                    lineTension: 0.2,
                    fill: true,
                    pointHoverBackgroundColor: colorDanger,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Pending")',
                    data: ordersData.Day.Data[1].Amount,
                    borderWidth: 4,
                    borderColor: colorWarning,
                    backgroundColor: pendingGradient,
                    lineTension: 0.2,
                    fill: true,
                    hidden: true,
                    pointHoverBackgroundColor: colorWarning,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Processing")',
                    data: ordersData.Day.Data[2].Amount,
                    borderWidth: 4,
                    borderColor: colorSuccess,
                    backgroundColor: processingGradient,
                    lineTension: 0.2,
                    fill: true,
                    hidden: true,
                    pointHoverBackgroundColor: colorSuccess,
                    pointHoverBorderColor: 'transparent',
                }, {
                    label: '@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Complete")',
                    data: ordersData.Day.Data[3].Amount,
                    borderWidth: 3,
                    borderColor: colorPrimary,
                    backgroundColor: salesGradient,
                    lineTension: 0.2,
                    fill: true,
                    pointHoverBackgroundColor: colorPrimary,
                    pointHoverBorderColor: 'transparent',
                }]
            },
            options: chartOptions,
        }

        var ordersChart = new Chart(orders_ctx, order_config);

        $(ordersLegendContainer).html(ordersChart.generateLegend());
        var legendItems = ordersLegendContainer.getElementsByTagName('li');
        for (var i = 0; i < legendItems.length; i++) {
            legendItems[i].addEventListener("click", legendClickCallback, false);
        }

        function hexToRgba(hex, opacity) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            var rgb = result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
            return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + opacity + ')';
        }

    });
</script>
<style>
    #orders-chart-legend > ul {
        cursor: pointer;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #orders-chart-legend li {
        display: inline-block;
        user-select: none;
    }

        #orders-chart-legend li:not(:last-child) {
            padding-right: 1rem;
        }

        #orders-chart-legend li.hidden {
            text-decoration: line-through;
            user-select: none;
        }

    #orders-chart-legend .total-amount {
        text-decoration: none !important;
        display: inline-block;
        user-select: text;
    }

    #orders-chart-legend .legend {
        border-radius: 7px;
        display: inline-block;
        height: 11px;
        margin-right: .3rem;
        width: 11px;
    }
</style>