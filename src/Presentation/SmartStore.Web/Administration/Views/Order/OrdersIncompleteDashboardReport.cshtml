@model OrdersIncompleteDashboardReportModel
@using Newtonsoft.Json;
@{
    var jsonData = JsonConvert.SerializeObject(Model);
}

<div class="report">
    <div class="report-title-row">
        <div class="report-title">@T("Admin.SalesReport.Incomplete") Insgesamt</div>
    </div>
    <div class="incomplete-orders-chart-container">
        <div class="incomplete-orders-chart-text">
            <div class="fs-h4 text-bold fade-in">@Model.QuantityTotal</div>
            <div class="fs-h5 fade-in">@Model.AmountTotal</div>
        </div>
        <div class="canvas-container w-100 h-100">
            <canvas id="incomplete-orders-chart" width="4" height="3" style="pointer-events: all">
            </canvas>
        </div>
    </div>
</div>

<script>
    var style = getComputedStyle(document.body);
    var dataSets = JSON.parse('@Html.Raw(jsonData)');

    var colorSuccess = style.getPropertyValue('--success');
    var colorPrimary = style.getPropertyValue('--primary');
    var colorWarning = style.getPropertyValue('--warning');
    var fontFamily = style.getPropertyValue('--font-family');

    var $incompleteOrdersChartElement = $('#incomplete-orders-chart')[0];
    var $incompleteOrdersCtx = $incompleteOrdersChartElement.getContext('2d');

    //var indigoGradient = $incompleteOrdersCtx.createRadialGradient(
    //    $incompleteOrdersChartElement.clientWidth / 2,
    //    $incompleteOrdersChartElement.clientHeight / 2,
    //    $incompleteOrdersChartElement.clientWidth / 6,
    //    $incompleteOrdersChartElement.clientWidth / 2,
    //    $incompleteOrdersChartElement.clientHeight / 2,
    //    $incompleteOrdersChartElement.clientWidth / 3.6
    //);
    //indigoGradient.addColorStop(0, colorSuccess);
    //indigoGradient.addColorStop(0.65, colorSuccess);
    //indigoGradient.addColorStop(1, 'white');

    //var warningGradient = $incompleteOrdersCtx.createRadialGradient(
    //    $incompleteOrdersChartElement.clientWidth / 2,
    //    $incompleteOrdersChartElement.clientHeight / 2,
    //    $incompleteOrdersChartElement.clientWidth / 6,
    //    $incompleteOrdersChartElement.clientWidth / 2,
    //    $incompleteOrdersChartElement.clientHeight / 2,
    //    $incompleteOrdersChartElement.clientWidth / 3.6
    //);
    //warningGradient.addColorStop(0, colorWarning);
    //warningGradient.addColorStop(0.65, colorWarning);
    //warningGradient.addColorStop(1, 'white');

    var data = {
        labels: ["@T("Admin.SalesReport.Incomplete.TotalNotShippedOrders")", "@T("Admin.SalesReport.Incomplete.TotalUnpaidOrders")", "@T("Admin.SalesReport.NewOrders")"],
        datasets: [{
            data: [dataSets.Reports[0].Quantity, dataSets.Reports[1].Quantity, dataSets.Reports[2].Quantity],
            backgroundColor: [colorWarning, colorPrimary, colorSuccess],
            borderAlign: 'center',
            borderColor: '#fff',
            borderWidth: 10,
            weight: 1,
            hoverBackgroundColor: [colorWarning, colorPrimary, colorSuccess],
            hoverBorderColor: '#fff',
            hoverBorderWidth: 0,
        }],
    };

    var options = {
        responsive: true,
        responsiveAnimationDuration: 1000,
        maintainAspectRatio: false,
        cutoutPercentage: 80,
        rotation: -0.5 * Math.PI,
        circumfernce: 2 * Math.PI,
        animation: {
            animateRotate: true,
            animateScale: true,
            duration: 1000,
            easing: 'easeInOutSine',
        },
        layout: {
            padding: {
                left: 0,
                right: 0,
                top: 20,
                bottom: 20
            }
        },
        legend: false,
        tooltips: {
            enabled: true,
            mode: 'nearest',
            intersect: true,
            titleFontFamily: fontFamily,
            bodyFontFamily: fontFamily,
            xPadding: 10,
            yPadding: 8,
            caretPadding: 6,
            caretSize: 8,
            cornerRadius: 4,
            titleMarginBottom: 8,
            bodySpacing: 5,
            callbacks: {
                label: function (item, data) {
                    return " " + data.labels[item.index] + ": " + dataSets.Reports[item.index].QuantityFormatted;
                },
            }
        },
    };

    var myDoughnutChart = new Chart($incompleteOrdersCtx, {
        type: 'doughnut',
        data: data,
        options: options
    });
</script>