@using SmartStore.Rules
@model IRuleExpression
@{
    var id = string.Concat("rule-value-", Model.Id);
    var list = Model.Descriptor.SelectList;
    var selectedValues = Model.RawValue.SplitSafe(",");
    var remoteUrl = string.Empty;

    if (list is RemoteRuleValueSelectList remoteList)
    {
        remoteUrl = Url.Action("RuleValues", "Rule", new
        {
            dataSource = remoteList.DataSource,
            ruleSetId = (int)ViewBag.RuleSetId,
            ruleType = Model.Descriptor.RuleType.Name,
            selected = Model.RawValue
        });
    }
}
<select id="@id" name="@id" 
        data-placeholder="@T("Common.Unspecified")" 
        @Html.Attr("multiple", "multiple", list.Multiple)>
    @if (remoteUrl.HasValue())
    {
        var names = Model.Metadata.TryGetValue("SelectedDisplayNames", out var objNames)
            ? (Dictionary<string, string>)objNames
            : new Dictionary<string, string>();

        foreach (var value in selectedValues)
        {
            <option value="@value" selected="selected">@(names.TryGetValue(value, out var name) && name.HasValue() ? name : value)</option>
        }
    }
    else
    {
        if (!selectedValues.Any() && !list.Multiple)
        {
            <option></option>
        }
        foreach (var grp in ((LocalRuleValueSelectList)list).Options.OrderBy(x => x.Group?.Order ?? 0).GroupBy(x => x.Group?.Name ?? ""))
        {
            if (grp.Key.HasValue())
            {
                @Html.Raw("<optgroup label=\"{0}\">".FormatInvariant(grp.Key))
            }
            foreach (var option in grp)
            {
                <option value="@option.Value" @Html.Attr("selected", "selected", selectedValues.Contains(option.Value))>@option.Text</option>
            }
            if (grp.Key.HasValue())
            {
                @Html.Raw("</optgroup>")
            }
        }
    }
</select>

<script>
    $(function () {
        var options = {
            allowClear: true,
            minimumResultsForSearch: 16
        };

        @if (remoteUrl.HasValue())
        {<text>
            options.ajax = {
                delay: 300,
                cache: true,
                dataType: 'json',
                type: 'GET',
                url: '@Html.Raw(remoteUrl)',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 0
                    }
                    return query;
                },
                processResults: function (data, params) {
                    params.page = params.page || 0;
                    return {
                        results: data.results,
                        pagination: {
                            more: data.hasMoreItems
                        }
                    };
                }
            }
        </text>}

        $('#@id').selectWrapper(options);
	});
</script>
