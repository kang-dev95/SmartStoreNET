@using SmartStore.Rules
@using SmartStore.Admin.Models.Rules
@model IRuleExpression
@{
    var id = string.Concat("rule-value-", Model.Id);
    var list = Model.Descriptor.SelectList;
    var values = Model.RawValue.SplitSafe(",");
    var hasSubTitles = false;
    var remoteUrl = string.Empty;

    if (list is RemoteRuleValueSelectList remoteList)
    {
        hasSubTitles = remoteList.DataSource.IsCaseInsensitiveEqual("Product");

        remoteUrl = Url.Action("RuleValues", "Rule", new
        {
            dataSource = remoteList.DataSource,
            ruleSetId = (int)ViewBag.RuleSetId,
            ruleType = Model.Descriptor.RuleType.Name,
            selected = Model.RawValue
        });
    }
}
<select id="@id" name="@id" data-placeholder="@T("Common.Unspecified")" @Html.Attr("multiple", "multiple", list.Multiple)>
    @if (remoteUrl.HasValue())
    {
        var selectedItems = Model.Metadata.TryGetValue("SelectedItems", out var objSelectedItems)
            ? (Dictionary<string, RuleValueSelectItem>)objSelectedItems
            : new Dictionary<string, RuleValueSelectItem>();

        foreach (var value in values)
        {
            selectedItems.TryGetValue(value, out var selectedItem);
            <option value="@value" selected="selected" @Html.Attr("data-subtitle", selectedItem?.subtitle.EmptyNull(), hasSubTitles)>@(selectedItem?.text ?? value)</option>
        }
    }
    else
    {
        if (!values.Any() && !list.Multiple)
        {
            <option></option>
        }
        foreach (var grp in ((LocalRuleValueSelectList)list).Options.OrderBy(x => x.Group?.Order ?? 0).GroupBy(x => x.Group?.Name ?? ""))
        {
            if (grp.Key.HasValue())
            {
                @Html.Raw("<optgroup label=\"{0}\">".FormatInvariant(grp.Key))
            }
            foreach (var option in grp)
            {
                <option value="@option.Value" @Html.Attr("selected", "selected", values.Contains(option.Value))>@option.Text</option>
            }
            if (grp.Key.HasValue())
            {
                @Html.Raw("</optgroup>")
            }
        }
    }
</select>

<script>
    $(function () {
        var options = {
            allowClear: true,
            minimumResultsForSearch: 16
        };

        @if (hasSubTitles)
        {<text>
            function truncatedText(str, classes, maxLength) {
                if (!str.length) {
                    return '';
                }
                else if (str.length > maxLength) {
                    return '<span class="' + classes + '" title="' + $('<div/>').text(str).html() + '">' + str.substring(0, maxLength) + '…</span>';
                }
                else {
                    return '<span class="' + classes + '">' + str + '</span>';
                }
            }

            options.templateSelection = function (item, container) {
                try {
                    if (item.text.length > 0) {
                        if (item.subtitle === undefined) {
                            item.subtitle = $(item.element).data('subtitle');
                        }

                        var text = item.text;
                        if (text.length > 100) {
                            text = text.substring(0, 100) + '…';
                        }

                        var title = item.text;
                        if (item.subtitle.length > 0) {
                            title += ' [' + item.subtitle + ']';
                        }

                        return $('<span title="' + $('<div/>').text(title).html() + '">' + text + '</span>');
                    }
			    }
                catch (e) { }

                return item.text;
            };

            options.templateResult = function (item, container) {
                try {
                    if (item.text.length > 0) {
                        var html = '<div class="select2-option">';
                        html += truncatedText(item.text, '', 200);
                        html += truncatedText(item.subtitle, 'float-right muted', 100);
                        html += '</div>';
                        return $(html);
                    }
			    }
                catch (e) { }

                return item.text;
            };
        </text>}

        @if (remoteUrl.HasValue())
        {<text>
            options.ajax = {
                delay: 300,
                cache: true,
                dataType: 'json',
                type: 'GET',
                url: '@Html.Raw(remoteUrl)',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 0
                    }
                    return query;
                },
                processResults: function (data, params) {
                    params.page = params.page || 0;
                    return {
                        results: data.results,
                        pagination: {
                            more: data.hasMoreItems
                        }
                    };
                }
            }
        </text>}

        $('#@id').selectWrapper(options);
	});
</script>
