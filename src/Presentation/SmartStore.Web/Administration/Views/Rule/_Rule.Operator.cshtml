@model IRuleExpression

@using SmartStore.Rules

@functions {
    string GetOperatorLabel(RuleOperator op)
    {
        var map = new Dictionary<string, string>
        {
            { RuleOperator.Contains, "Enthält" },
            { RuleOperator.EndsWith, "Endet auf" },
            { RuleOperator.GreaterThan, "Größer als" },
            { RuleOperator.GreaterThanOrEqualTo, "Größer oder gleich" },
            { RuleOperator.In, "Ist eine von" },
            { RuleOperator.IsEmpty, "Ist leer" },
            { RuleOperator.IsEqualTo, "Gleich" },
            { RuleOperator.IsNotEmpty, "Ist nicht leer" },
            { RuleOperator.IsNotEqualTo, "Ungleich" },
            { RuleOperator.IsNotNull, "Ist nicht NULL" },
            { RuleOperator.IsNull, "Ist NULL" },
            { RuleOperator.LessThan, "Kleiner als" },
            { RuleOperator.LessThanOrEqualTo, "Kleiner oder gleich" },
            { RuleOperator.NotContains, "Enthält nicht" },
            { RuleOperator.NotIn, "Ist KEINE von" },
            { RuleOperator.StartsWith, "Beginnt mit" }
        };

        return map.Get(op.Operator);
    }
}

<div class="btn-group d-block" role="group">
    <button type="button" class="btn btn-info btn-block dropdown-toggle d-flex align-items-center justify-content-between" data-toggle="dropdown">
        @GetOperatorLabel(Model.Operator)
    </button>
    <div class="dropdown-menu">
        @foreach (var op in Model.Descriptor.Operators)
        {
            <a href="#" class="dropdown-item" data-value="@op.Operator">@GetOperatorLabel(op)</a>
        }
    </div>
</div>


@*<select class="form-control">
    @foreach (var op in Model.Descriptor.Operators)
    {
        <option value="@op.Operator" @(op == Model.Operator ? " selected" : "")>@op.Operator</option>
    }
</select>*@
