@model RuleSetModel

@using SmartStore.Rules
@using SmartStore.Admin.Models.Rules

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.IsSubGroup)
@Html.HiddenFor(model => model.CreatedOnUtc)
@Html.HiddenFor(model => model.UpdatedOnUtc)
@Html.HiddenFor(model => model.LastProcessedOnUtc)

<div class="adminContent">
    <div class="adminRow">
        <div class="adminTitle">
            @Html.SmartLabelFor(model => model.Name)
        </div>
        <div class="adminData">
            @Html.TextBoxFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            @Html.SmartLabelFor(model => model.Description)
        </div>
        <div class="adminData">
            @Html.TextAreaFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            @Html.SmartLabelFor(model => model.IsActive)
        </div>
        <div class="adminData">
            @Html.CheckBoxFor(model => model.IsActive)
            @Html.ValidationMessageFor(model => model.IsActive)
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            @Html.SmartLabelFor(model => model.Scope)
        </div>
        <div class="adminData">
            @if (Model.Id == 0)
            {
                @Html.DropDownListForEnum(model => model.Scope)
            }
            else
            {
                @Html.TextBoxFor(model => model.Scope, new { @readonly = "readonly" })
            }
        </div>
    </div>
</div>

@if (Model.Id != 0)
{
    <h4 class="my-4">@T("Admin.Rules.Execute", "<a id=\"execute-rules\" class=\"btn btn-primary\" href=\"" + Url.Action("Execute", new { ruleSetId = Model.Id }) + "\">", "</a>")</h4>
    <div id="excute-result" class="alert alert-warning hide"></div>

    <div class="ruleset-root" data-scope="@((int)Model.Scope)">
        @{ Html.RenderPartial("_RuleSet", Model.ExpressionGroup); }
    </div>
}

<script>
    $(function () {
        function appendToRuleSetBody(ruleSet, html) {
            var target = ruleSet.find('.ruleset-body').first();
            if (target.length === 0) {
                target = $('<div class="ruleset-body"></div>').appendTo(ruleSet);
            }
            target.append(html);
            target.find('select').selectWrapper();
        }

        $(document).on('click', '.r-add-group', function (e) {
            var parentSet = $(this).closest('.ruleset');
            var parentSetId = parentSet.data('ruleset-id');
            var scope = parentSet.closest('.ruleset-root').data('scope');

            $.ajax({
                cache: false,
                url: "@Url.Action("AddGroup")",
                data: { ruleSetId: parentSetId, scope: scope },
			    type: "POST",
                success: function (html) {
                    appendToRuleSetBody(parentSet, html);
			    }
            });

            return false;
        });

        $(document).on('click', '.ruleset-operator .dropdown-item', function (e) {
            var parentSet = $(this).closest('.ruleset');
            var parentSetId = parentSet.data('ruleset-id');
            var operator = $(this).data('value');
            var allStr = @T("Admin.Rules.Operator.All").JsText;
            var oneStr = @T("Admin.Rules.Operator.One").JsText;

            $.ajax({
                cache: false,
                url: "@Url.Action("ChangeOperator")",
                data: { ruleSetId: parentSetId, op: operator },
			    type: "POST",
                success: function () {
                    parentSet.find(".logical-operator").text(operator == "And" ? allStr : oneStr);
                    parentSet.find(".logical-operator-chooser").removeClass("show");
			    }
            });

            return false;
        });

        $(document).on('click', '.r-delete-group', function (e) {
            var parentSet = $(this).closest('.ruleset');
            var refRuleId = parentSet.data('refrule-id');

            $.ajax({
                cache: false,
                url: "@Url.Action("DeleteGroup")",
                data: { refRuleId: refRuleId },
			    type: "POST",
			    success: function (result) {
                    if (result.Success) {
                        parentSet.remove();
                    }
			    }
            });

            return false;
        });

        $(document).on('click', '.r-save-rule', function (e) {
            var rule = $(this).closest('.rule');
            var ruleId = rule.data('rule-id');
            var op = rule.find(".rule-operator").data("value");

            var control = rule.find(':input[name="' + rule.data('control-id') + '"]');
            var value = control.val();

            $.ajax({
                cache: false,
                url: "@Url.Action("UpdateRule")",
                data: { ruleId: ruleId, op: op, value: value },
			    type: "POST",
			    success: function (result) {
                    if (result.Success) {
                        location.reload();
                    }
			    }
            });

            return false;
        });

        $(document).on('change', '.r-add-rule', function (e) {
            var select = $(this);
            var ruleType = select.val();
            if (!ruleType)
                return;

            var parentSet = select.closest('.ruleset');
            var parentSetId = parentSet.data('ruleset-id');
            var scope = parentSet.closest('.ruleset-root').data('scope');

            $.ajax({
                cache: false,
                url: "@Url.Action("AddRule")",
                data: { ruleSetId: parentSetId, scope: scope, ruleType: ruleType },
			    type: "POST",
			    success: function (html) {
                    appendToRuleSetBody(parentSet, html);
                    select.val('').trigger('change');
			    }
            });

            return false;
        });

        $(document).on('click', '.r-delete-rule', function (e) {
            var rule = $(this).closest('.rule');
            var ruleId = rule.data('rule-id');

            $.ajax({
                cache: false,
                url: "@Url.Action("DeleteRule")",
                data: { ruleId: ruleId },
			    type: "POST",
			    success: function (result) {
                    if (result.Success) {
                        rule.remove();
                    }
			    }
            });

            return false;
        });

        $(document).on('click', '#execute-rules', function (e) {
            var ruleSet = $(".ruleset-root > .ruleset")
            var ruleSetId = ruleSet.data('ruleset-id');

            $.ajax({
                cache: false,
                url: "@Url.Action("Execute")",
                data: { ruleSetId: ruleSetId },
			    type: "POST",
			    success: function (result) {
                    if (result.Success) {
                        $("#excute-result").text(result.Message).removeClass("hide");
                    }
			    }
            });

            return false;
        });

    });

    function GetOperatorLabel(op) {
        switch (op) {
            case "@Html.Raw(RuleOperator.Contains)":
                return @T("Admin.Rules.RuleOperator.Contains").JsText;
                break;
            case "@Html.Raw(RuleOperator.EndsWith)":
                return @T("Admin.Rules.RuleOperator.EndsWith").JsText;
                break;
            case "@Html.Raw(RuleOperator.GreaterThan)":
                return @T("Admin.Rules.RuleOperator.GreaterThan").JsText;
                break;
            case "@Html.Raw(RuleOperator.GreaterThanOrEqualTo)":
                return @T("Admin.Rules.RuleOperator.GreaterThanOrEqualTo").JsText;
                break;
            case "@Html.Raw(RuleOperator.In)":
                return @T("Admin.Rules.RuleOperator.In").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsEmpty)":
                return @T("Admin.Rules.RuleOperator.IsEmpty").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsEqualTo)":
                return @T("Admin.Rules.RuleOperator.IsEqualTo").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsNotEmpty)":
                return @T("Admin.Rules.RuleOperator.IsNotEmpty").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsNotEqualTo)":
                return @T("Admin.Rules.RuleOperator.IsNotEqualTo").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsNotNull)":
                return @T("Admin.Rules.RuleOperator.IsNotNull").JsText;
                break;
            case "@Html.Raw(RuleOperator.IsNull)":
                return @T("Admin.Rules.RuleOperator.IsNull").JsText;
                break;
            case "@Html.Raw(RuleOperator.LessThan)":
                return @T("Admin.Rules.RuleOperator.LessThan").JsText;
                break;
            case "@Html.Raw(RuleOperator.LessThanOrEqualTo)":
                return @T("Admin.Rules.RuleOperator.LessThanOrEqualTo").JsText;
                break;
            case "@Html.Raw(RuleOperator.NotContains)":
                return @T("Admin.Rules.RuleOperator.NotContains").JsText;
                break;
            case "@Html.Raw(RuleOperator.NotIn)":
                return @T("Admin.Rules.RuleOperator.NotIn").JsText;
                break;
            case "@Html.Raw(RuleOperator.StartsWith)":
                return @T("Admin.Rules.RuleOperator.StartsWith").JsText;
                break;

            default:
                return "ERROR";
                break;
        }
    }
</script>